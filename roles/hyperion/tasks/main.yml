---
- name: Checking out Hyperion History API
  git:
    repo: "{{ api_git_repo }}"
    clone: yes
    dest: "{{ working_dir }}/src/Hyperion-History-API"
    version: "{{ hyperion_version }}"
    recursive: yes
    force: yes
  become: yes
  become_user: "{{ deploy_user }}"

- name: Install Hyperion History API packages
  command: npm install
  args:
    chdir: '{{ working_dir }}/src/Hyperion-History-API'
  become: yes
  become_user: '{{ deploy_user }}'

- name: Start PM2
  command: pm2 startup
  args:
    creates: /etc/systemd/system/pm2-root.service

- name: Enables the rabbitmq_management plugin
  rabbitmq_plugin:
    names: rabbitmq_management
    state: enabled

- name: Create rabbitmq vhost
  rabbitmq_vhost:
    name: hyperion
    state: present

- rabbitmq_user:
    user: '{{ rabbitmq_user }}'
    password: '{{ rabbitmq_password }}'
    tags: administrator
    permissions:
      - vhost: hyperion
        configure_priv: .*
        read_priv: .*
        write_priv: .*
    state: present

- name: Configure Redis
  lineinfile:
    path: '{{ redis_conf_path }}'
    regexp: '^supervised'
    line: supervised systemd

- name: Enable redis service
  service:
    name: redis
    state: restarted
    enabled: yes

- name: Install Elasticsearch
  apt:
    deb: https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.16.3-amd64.deb
    state: present

- name: Configure Elasticsearch - elasticsearch.yml
  shell: 'sudo sed -ie "s/#cluster.name: my-application/cluster.name: hyperionCluster/; s/#bootstrap.memory_lock: true/bootstrap.memory_lock: true/" {{ es_conf_path }}'
  args:
    executable: /bin/bash
  become: yes
  become_user: "{{ deploy_user }}"

- name: Configure Elasticsearch - enable xpack security
  shell: 'echo "xpack.security.enabled: true" | sudo tee -a {{ es_conf_path }}'
  args:
    executable: /bin/bash
  become: yes
  become_user: "{{ deploy_user }}"

- name: Configure Elasticsearch - jvm.options
  shell: 'sudo sed -ie "s/## -Xms4g/-Xms{{ jvm_heap_size }}/; s/## -Xmx4g/-Xmx{{ jvm_heap_size }}/" {{ es_jvm_opts_path }}'
  args:
    executable: /bin/bash
  become: yes
  become_user: "{{ deploy_user }}"


- name: Create elasticsearch service override directory
  file:
    path: '/etc/systemd/system/elasticsearch.service.d/'
    state: directory
    owner: '{{ deploy_user }}'
    group: '{{ deploy_group }}'

- name: Configure Elasticsearch - systemd override.conf
  shell: 'sudo touch {{ es_override_path }} && echo -e "[Service]\nLimitMEMLOCK=infinity" | sudo tee {{ es_override_path }}'
  args:
    executable: /bin/bash
  become: yes
  become_user: "{{ deploy_user }}"

- name: Reload daemon and start elasticsearch
  systemd:
    state: restarted
    daemon_reload: yes
    name: elasticsearch

- name: Auto-generate Elasticsearch User
  shell: 'echo "y" | sudo /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto > elastic_pass.txt'
  args:
    chdir: '{{ working_dir }}/src/Hyperion-History-API'
  become: yes
  become_user: '{{ deploy_user }}'

- name: Retrieve auto-generated elasticsearch user credentials.
  shell: awk <elastic_pass.txt '/PASSWORD elastic =/ {print $4}'
  args:
    chdir: '{{ working_dir }}/src/Hyperion-History-API'
  register: elastic_pw

- name: Configure Hyperion API
  template:
    src: ecosystem.config.js.j2
    dest: "{{ working_dir }}/src/Hyperion-History-API/ecosystem.config.js"
    mode: u+wrx
    owner: "{{ deploy_user }}"
    group: "{{ deploy_group }}"

- name: Configure Hyperion connections.json
  template:
    src: connections.json.j2
    dest: "{{ working_dir }}/src/Hyperion-History-API/connections.json"
    mode: u+wrx
    owner: "{{ deploy_user }}"
    group: "{{ deploy_group }}"

- name: Configure Hyperion {{ name }}.config.json
  template:
    src: config.json.j2
    dest: "{{ working_dir }}/src/Hyperion-History-API/chains/{{ name }}.config.json"
    mode: u+wrx
    owner: "{{ deploy_user }}"
    group: "{{ deploy_group }}"

- name: Make logs directory
  file:
    path: "{{ working_dir }}/src/Hyperion-History-API/logs/{{ name }}"
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_group }}"

- name: Start Hyperion API
  command: pm2 start --only {{ name }}-api --update-env
  args:
    chdir: '{{ working_dir }}/src/Hyperion-History-API'
  become: yes
  become_user: '{{ deploy_user }}'

- name: Start Hyperion Indexer
  command: pm2 start --only {{ name }}-indexer --update-env
  args:
    chdir: '{{ working_dir }}/src/Hyperion-History-API'
  become: yes
  become_user: '{{ deploy_user }}'
