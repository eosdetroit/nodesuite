# Override default WASM runtime (eosio::chain_plugin)
wasm-runtime = {{ wasm_runtime }}

{% if wasm_runtime == "eos-vm-jit" and eos_vm_oc_enable %}
eos-vm-oc-compile-threads = 4
eos-vm-oc-enable = 1
{% endif %}

# Override default maximum ABI serialization time allowed in ms (eosio::chain_plugin)
abi-serializer-max-time-ms = {{ abi_serializer_max_time_ms }}

# Maximum size (in MiB) of the chain state database (eosio::chain_plugin)
{% if chain_state_db_size_mb %}
chain-state-db-size-mb = {{ chain_state_db_size_mb }}
{% endif %}

# Number of worker threads in controller thread pool (eosio::chain_plugin)
chain-threads = {{ chain_threads }}

# print contract's output to console (eosio::chain_plugin)
contracts-console = true

# Database read mode ("speculative", "head", "read-only", "irreversible").
# In "speculative" mode database contains changes done up to the head block plus changes made by transactions not yet included to the blockchain.
# In "head" mode database contains changes done up to the current head block.
# In "read-only" mode database contains changes done up to the current head block and transactions cannot be pushed to the chain API.
# In "irreversible" mode database contains changes done up to the last irreversible block and transactions cannot be pushed to the chain API.
#  (eosio::chain_plugin)
{% if setup_producer | bool %}
read-mode = speculative
{% else %}
read-mode = head
{% endif %}

{% if ((node_type == "seed") and (name != "fio")) %}
p2p-accept-transactions = false 
{% endif %}

# Indicate a producer whose blocks headers signed by it will be fully validated, but transactions in those validated blocks will be trusted. (eosio::chain_plugin)
# trusted-producer =
{% if producer_name %}
trusted-producer = {{ producer_name }}
{% endif %}

# Database map mode ("mapped", "heap", or "locked").
# In "mapped" mode database is memory mapped as a file.
# In "heap" mode database is preloaded in to swappable memory.
# In "locked" mode database is preloaded, locked in to memory, and optionally can use huge pages.
#  (eosio::chain_plugin)
database-map-mode = {{ database_map_mode }}

# true: validate that the peer certificates are valid and trusted, false: ignore cert errors (eosio::http_client_plugin)
# https-client-validate-peers = true

# The local IP and port to listen for incoming http connections; set blank to disable. (eosio::http_plugin)
http-server-address = {{ http_server_ip }}:{{ http_server_port }}

# Specify the Access-Control-Allow-Origin to be returned on each request. (eosio::http_plugin)
access-control-allow-origin = *

# Specify the Access-Control-Allow-Headers to be returned on each request. (eosio::http_plugin)
# access-control-allow-headers =
access-control-allow-headers = Origin, X-Requested-With, Content-Type, Accept

{% if http_max_response_time_ms | d() %}
http-max-response-time-ms = {{ http_max_response_time_ms }}
{% endif %}
# Append the error log to HTTP responses (eosio::http_plugin)
verbose-http-errors = true

# If set to false, then any incoming "Host" header is considered valid (eosio::http_plugin)
http-validate-host = false

# Number of worker threads in http thread pool (eosio::http_plugin)
http-threads = {{ http_threads }}

# The actual host:port used to listen for incoming p2p connections. (eosio::net_plugin)
p2p-listen-endpoint = {{ p2p_server_ip }}:{{ p2p_server_port }}

# An externally accessible host:port for identifying this node. Defaults to p2p-listen-endpoint. (eosio::net_plugin)
# p2p-server-address =

# The public endpoint of a peer node to connect to. Use multiple p2p-peer-address options as needed to compose a network. (eosio::net_plugin)
# p2p-peer-address =
{% for peer in peers %}
p2p-peer-address = {{ peer }}
{% endfor %}

# The name supplied to identify this node amongst the peers. (eosio::net_plugin)
{% if agent_name  %}
agent-name = "{{ agent_name }}"
{% endif %}

# Optional public key of peer allowed to connect.  May be used multiple times. (eosio::net_plugin)
# peer-key =
{% if peer_keys %}
	{% for peer_key in peer_keys %}
	peer-key = {{ peer_key }}
	{% endfor %}
{% endif %}

{% if peer_pubkey and peer_privkey %}
# Tuple of [PublicKey, WIF private key] (may specify multiple times) (eosio::net_plugin)
peer-private-key = ["{{ peer_pubkey }}", "{{ peer_privkey }}"]
{% endif %}

# Maximum number of clients from which connections are accepted, use 0 for no limit (eosio::net_plugin)
max-clients = {{ max_clients }}

# Number of worker threads in net_plugin thread pool (eosio::net_plugin)
net-threads = {{ net_threads }}

# number of blocks to retrieve in a chunk from any individual peer during synchronization (eosio::net_plugin)
sync-fetch-span = {{ sync_fetch_span }}

# Limits the maximum time (in milliseconds) that is allowed a pushed transaction's code to execute before being considered invalid (eosio::producer_plugin)
max-transaction-time = {{ max_transaction_time }}

# Maximum time the node will run parallel read-only operations (eosio::producer_plugin)
read-only-read-window-time-us = {{ read_only_read_window_time_us }}

{% if setup_producer | bool %}
plugin = eosio::producer_plugin
producer-name = {{ producer_name }}
{% if is_failover | bool %}
signature-provider = {{ failover_public_signing_key }}=KEY:{{ failover_private_signing_key }}
{% else %}
signature-provider = {{ public_signing_key }}=KEY:{{ private_signing_key }}
{% endif %}
{% if last_block_time_offset_us | d() | bool %}
last-block-time-offset-us = {{ last_block_time_offset_us }}
{% endif %}

{% if cpu_effort_percent | d() | bool %}
cpu-effort-percent = {{ cpu_effort_percent }}
{% endif %}

{% if last_block_cpu_effort_percent | d() | bool %}
last-block-cpu-effort-percent = {{ last_block_cpu_effort_percent }}
{% endif %}
{% endif %}

# Number of worker threads in producer thread pool (eosio::producer_plugin)
producer-threads = {{ producer_threads }}

# Plugin(s) to enable, may be specified multiple times
# plugin =
{% for plugin in plugins %}
plugin = {{ plugin }}
{% endfor %}

{% if setup_state_history | d() | bool %}
trace-history = true
chain-state-history = true
state-history-endpoint = {{ state_history_server_ip }}:{{ state_history_server_port }}
plugin = eosio::state_history_plugin
{% endif %}